模板字符串用`add ${key}`来表达里面需要执行的内容
箭头函数的this的作用域在函数外面
Object.assign()方法的拷贝是浅拷贝（source值的变化会使得输出变化）
尾调用使用时要用严格模式
可以用循环的方法代替递归

object.getOwnPropertyDescriptor能返回某个对象属性的描述对象
getOwnPropertyDescriptors方法能返回该对象所有自身属性的描述对象
可枚举的值要是false就不能被循环出来

symbol 数据不能用new初始化，直接定义就可以
symbol数据不能和其他数据进行计算
在对象内部用symbol定义属性时，symbol必须放在方括号之中[mySymbol]
尽量消除魔术字符串，写成变量好维护
symbol属性名不会被循环遍历 for...in for...of
可以定义非私有的，但又只用于内部的方法
Symbol.for()接受一个字符串参数来寻找是否存在这个字符串的这个symbol
for会被登记在全局中供搜索，而Symbol不会，用Symbol.keyFor()能找到那个key值

proxy会对到达目标对象之前设一道拦截
var proxy = new Proxy(target, handler);
要使得Proxy起作用，必须是针对Proxy实例进行操作，而不是针对目标对象进行操作
（技巧： 
	可以把Proxy对象设置到object.proxy属性，从而可以在object对象上调用）

proxy对象可以是别的对象的原型
let obj = Object.create(proxy);
has(target,propKey)拦截propKey in proxy的操作
apply接受三个参数，分别是目标对象，目标对象的上下文（this）和目标对象的参数数组
reflect将Object对象的一些明显属于语言内部的方法放在Reflect对象上
reflect一些方法的返回值更加合理，不是报错而是返回false
reflect让object操作都变成函数行为，比如
'assign' in Object //true
Reflect.has(Object, 'assign'); //true
Reflect对象的方法与proxy对象的方法一一对应，只要是proxy对象的方法就能在reflect对象上找到对应的方法。
同时，不管proxy怎么修改默认行为，都可以在reflect上获取默认行为。



操作二进制文件可用的API  h5新特性
File API
Fetch API
WebSocket
Canvas
AJAX

在===里NaN不等于本身
两个对象也是不相等的
Set()‘唯一’数组类型，类似数组但不是数组，可以用数组的方法
加入成员为set.add(a)
获取长度为set.size
Set结构的实例有以下属性
Set.prototype.constructor: 构造函数，默认就是Set函数
Set.prototype.size: 返回实例的成员总数
delete(value) 删除某个值
has(value)判断是否包含
clear()清楚所有成员
提供四个方法来进行遍历：
keys(): 返回键名
values(): 返回键值
entries(): 返回键值对
forEach(): 使用回调函数遍历每个成员
set结构是没有键值的 所以返回的 keys和values是一样的
用set结构能实现并集，交集，差集

WeakSet‘成员’只能是对象
var a = [2,2];
var ws = new WeakSet(a);//报错
WeakSet结构有三个方法
add(value)添加新成员
delete(value)清除制定成员
has(value)是否包含
主要作用是不会引起内存泄漏（弱引用，随时消失）


Map结构类型“值-值”的对应关系
对同样一个键多次赋值，后面的值会覆盖前面的值
var map = new Map();
map.set(['a'],500);
map.get(['a']); //undefined
Map的键实际上是和内存地址绑定的
如果键是一个简单类型的值（数字，字符串，布尔值），只要两个值严格相等，
就会视为一个键，包括0和-0  NaN
size 成员总数
set设置键值
get(key) , has(key) , delete(key) , clear()
Map结构的默认遍历器借口是entries
[...map.keys()]转换数组类型
Map没有map和filter方法但有forEach() 第二个绑定this
map.forEach(function(value,key,map){
	this.report();
},reporter);
这里的this会指向reporter

WeakMap只要是值接受对象作为键名，不接受其他类型的值作为键名，
键名所指向的对象不计入垃圾回收机制
专用场合是键所对应的对象随时在未来可能会消失，有助于防止内存泄漏
var wm = new WeakMap();
var element = document.querySelector(".element");
wm.set(element,"Original");
wm.get(element)//Original
element.parentNode.removeChild(element);
element = null;
wm.get(element) //undefined
没有size,所以不存在遍历操作(keys(),values(),entries())
只能用 get(),set(),has(),delete()

Iterator的作用有三：
一、为各种数据结构提供一个统一的简便的访问借口
二、使得数据结构的成员能够按某种次序排列
三、供for...of消费
要在Symbol.iterator的属性上部署遍历器生成方法
[Symbol.iterator](){return this;}
类似数组的对象，部署Iterator接口是直接引用数组的Iterator接口
NodeList.prototype[Symbol.iterator] = Array.prototype[Symbol.Iterator];
实现iterator最简单的方法是用Genertor函数
let obj = {
	* [Symbol.iterator](){
		yield 'hello';
		yield 'world';
	}
}
for(let x of obj){
	console.log(x);
}
return 方法必须返回一个对象

for...of使用的范围包括数组、Set和Map结构、某些类似数组的对象
如（arguments对象、DOM NodeList对象）Generator对象以及字符串
set和map循环的顺序是按各个成员添加进去的顺序
set是一个值，map是一个数组

forEach循环的问题： 中途不能跳出循环，break命令或者return命令都不能奏效
for...in的几个缺点
数组的键名是数字，但是这个循环的键名是字符串"0","1"
还会遍历手动添加的其他键，包括原型链上的键
某些情况下，for...in会以任意顺序遍历键名


调用Generator函数后，函数不执行，返回一个指向内部状态的指针对象
（Iterator Object）
yield语句是暂停执行的标记，而next方法可以恢复执行
遍历器对象的next方法的运行逻辑：
1.遇到yield就暂停执行，返回一个值作为返回的value属性值
2.下一次next方法继续往下执行直到下一个yield语句
3.如果没有新的yield语句一直到return为止
4.如果该函数没有return语句，就会返回undefined

yeild语句不能放在普通函数中
如果yeild语句用在一个表达式中必须放在圆括号里面
yield本身没有返回值，或者说返回undefined，但是next方法可以带一个参数，这个参数就是会当成上一个yield语句的返回值
next方法第一次使用时不能带有参数
有遍历器借口的方法都能将Generator函数返回的Iterator对象作为参数
function* numbers(){
	yield 1
	yield 2
	return 3
	yield 4
}
[...numbers()]//[1,2]
Array.from(numbers())// [1,2]
let[x,y] = numbers();
x // 1
y // 2
可以在Generator函数外部执行语句中throw一个错误在函数内部捕捉这个错误
throw的参数会被catch语句接收
throw方法被捕获以后会附带执行下一条yield语句
Generator函数还有一个return方法可以返回给定的值并终结遍历Generator函数
try...finally用于执行一段代码结束后执行块里的语句
如果在Generator函数里调用Generator函数是不会有效果的
需要用yield*语句在Generator函数里执行另一个Generator函数
比如：
function* bar(){
	yield 1;
	yield* foo();
	yield 2;
}
function* foo(){
	yield 3;
}
var g = bar();
任何数据结构只要有Iterator接口，就可以被yield*遍历
yield*可以很方便地取出嵌套数组的所有成员
function* iterTree(tree){
	if(Array.isArray(tree)){
		for(let i=0;i< tree.length;i++){
			yield* iterTree(tree[i]);
		}
	}else{
		yield tree;
	}
}
const tree = [1,[2,3],[4,5]];
for(let x of iterTree(tree)){
	console.log(x);
}
//1
//2
//...
对象属性是Generator函数可以简写成
let obj = {
	* gfunc(){
		...
	}
}
Generator函数不是构造函数不能跟new命令一起用
应用有：1.异步操作的同步化表达
2.控制流管理
3.部署Iterator接口
4.作为数据结构



var p = new Promise(function(resolve,reject){
	//...
	resolve();
	reject();
})
Promise一旦新建就会立即执行
Promise对象是一个构造函数，用来生成Promise实例
生成实例后可以用then分别制定Resolved状态和Reject状态的回调函数
第一个是Resolved调用的第二个是Reject调用的，但第二个是可选的
如果resolved和reject函数有参数就会把参数带到then里去
.catch()是.then(null,rejection)的别名，指定发生错误的回调函数
不要在then里定义Reject状态的回调函数，总是使用catch方法

Promise.all()将多个Promise实例包装成一个新的Promise实例
var p = Promise.all([p1,p2,p3]);
Promise.all()的参数可以不是数组但必须要有iterator接口
p的状态有两种
1.三个都办成fulfilled，p才会是fulfilled
2.只要有一个呗rejected，第一个呗reject返回值就传下去了
Promise.rece()和Promise.all()类似，但只要有一个率先改变状态就会改变自身状态
Promise.resolve()和Promise.reject()
.done()和.finally()的区别是finally接受一个普通的回调作为参数，不管怎么样都必须执行
应用：1.加载图片 2.Generator函数与Promise的结合

async函数Generator函数的语法糖
var gen = function* (){
	var f1 = yield readFile('/etc/fstab');
	var f2 = yield readFile('/etc/shells');
	console.log(f1.toString());
	console.log(f2.toString());
}
可以写成
var asyncReadFile = async function (){
	var f1 = await readFile('/etc/fstab');
	var f2 = await readFile('/etc/shells');
	console.log(f1.toString());
	console.log(f2.toString());
}
改进：
1.内置执行器 var result = asyncReadFile();直接出结果
2.更好的语义化
3.更广的适用性 await后面可以是Promise对象也可以是原始类型的值
4.返回值是Promise，比Generator返回Iterator方便

async函数返回的Promise对象必须等到内部所有await命令的Promise对象执行完才会发生状态改变
async函数命令后面是一个Promise对象，如果不是，就会转成一个立即resolve的Promise对象。
为了避免第一个语句里出现reject报错可以把语句放在try...catch里面
最好把await放在try...catch代码块里

class可以看做语法糖
定义类如下
class Point{
	constructor(x,y){
		this.x = x;
		this.y = y;
	}
	toString(){
		return "(" + this.x + "," +this.y + ")";
	}
}
定义类的方法时候前面不需要加上function关键字，方法之间不需要逗号分隔，加了会报错
使用时和构造函数的用法完全一致
var p = new Point();
p.constructor === Point.prototype.constructor //true
prototype对象的constructor属性直接指向类的本身
Point.prototype.constructor === Point //true
类内部定义的方法都是不可枚举的

constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须要有constructor方法，如果没有显式定义，一个空的constructor方法就会被默认添加
constructor方法默认返回实例对象（this）
Class不支持变量提升，必须先定义类再使用
_bar表示这是一个只限内部使用的私有方法
还可以内部用bar.call(this,baz)的方法调用外部的模块

类的方法内部如果含有this,他默认指向类的实例。但是必须非常小心
可以用箭头函数
class之间可以通过extends关键字来实现继承，比如：
class ColorPoint extends Point{
	constructor(x,y,color){
		super(x,y); //调用父类的constructor(x,y)
		this.color = color;
	}
}
子类必须在constructor方法中调用super方法，否则新建实例时会报错，因为子类没有自己的this对象
在子类的构造函数中，只有调用super之后，才可以使用this关键字
class A{}
class B {}
B.__proto__ === A //true
B.prototype.__proto__ === A.prototype //true
super关键词有两种用法
作为函数调用时，super代表父类的构造函数
作为对象调用时，代表父类

如果在一个方法前加上static关键字，表示该方法不会被实例继承，而是直接通过类来调用
class Foo{
	static classMethod(){
		return "hello";
	}
}
Foo.classMethod();//hello
class里只有静态方法，没有静态属性（ES6）ES7有

修饰器（Decorator）是一个函数类修改类的行为
修饰器对类的行为的改变是代码编译时发生的
修饰器函数的第一个参数是target
修饰器只能用于类和类的方法，不能用于函数，因为存在函数提升

import {stat,exists,readFile} from "fs";
上面代码实质是从fs模块加载3个方法，其他方法不加载，这种加载为“编译时加载”
ES6模块的好处
不需要UMD模块格式
将来浏览器的新API能用模块格式提供，不需要做成全局变量
不再需要对象作为命名空间，比如Math对象
浏览器使用ES6模块语法如下
<script type="module" src="foo.js"></script>
上述代码在网页中插入模块foo.js，由于type属性设为module，所以浏览器能识别模块
（Node的默认模块格式是CommonJS，目前还没支持ES6模块，要用Balbel转码来使用）
ES6模块自动采用严格模式：
1.变量必须声明后再使用
2.函数的参数不能有同名属性，否则报错
3.不能用with语句
4.不能对只读属性赋值，否则报错
5.不能使用前缀0表示八进制数
6.不能删除不可删除的属性
7.不能删除变量delete prop
8.eval不会在它的外层作用域引入变量
9.eval和arguments不能被重新赋值
10.不能使用arguments.callee和arguments.caller
11.禁止this指向全局变量
12.不能只用fn.caller和fn.arguments获取函数调用的堆栈
13.增加了保留字（protected、static和interface）

模块功能又两个命令组成 export和import
export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能
export命令除了输出变量，还可以输出函数或类
正确的输出方式
export var m = 1;
var m = 1;
export {m};
var n = 1;
export {n as m}
同样的，function和class的输出也必须遵循这样的写法
export function f(){}
function f(){}
export {f}

export语句输出的接口是动态绑定的
export语句可以在模块的任何位置，但是要处于模块顶层不能在块级作用域内

用as关键词可以为输入的变量重新取一个名字如
import {lastname as surname} from './profile';
import命令具有提升效果，会提升到整个模块的头部首先执行
使用*可以整体加载，从而制定一个对象拥有所有输出值
import * as circle from "./circle";
circle.area + circle.circumference

export default命令能为模块制定默认输出
export default function(){
	console.log('foo');
}

import customName from './export-default';
customName();能指定任意名字
这时import命令后面不使用大括号

假如继承其他模块可以这样：
export * from 'circle';

CommonJS模块输出的是一个值得拷贝，而ES6模块输出的是值得引用
import得到的变量指向的地址是只读的，不能重新赋值


编程风格
1.let可以完全取代var
2.在let和const之间建议使用const，尤其在全局环境中，不应该设置变量
比如： const [a,b,c] = [1,2,3];
3.静态字符串一律使用单引号或者反引号。动态字符串使用反引号

使用数组成员对变量赋值时候，有限使用解构赋值如：
const [firse,second] = arr;

使用扩展运算符(...)拷贝数组
const itemsCopy = [...items];
使用Array.from方法，将类似数组的对象转换为数组
const foo = document.querySelectAll('.foo');
const nodes = Array.from(foo);

立即执行函数可以写成箭头函数的形式
(()=> {
	console.log('welcome to the internet')
})();
简单的、单行的、不会复用的函数建议箭头函数，如果函数体较为复杂，行数较多，建议采用传统的函数写法。

区分Object和Map，只有模拟现实世界的实体对象时，才使用Object
使用Class取代需要prototype的操作

map方法遍历成员时，如果发现是空位就会直接跳过，不会进入回调函数。