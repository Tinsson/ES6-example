1.单例模式：
保证一个类仅有一个实例，并提供一个访问它的全局访问点
适用场景：（线程池，全局缓存）
代理类的方式：
 先创建需要的普通的业务逻辑类，
 再使用代理类
 var ProxySingleton = (function(){
 	var instance;
 	return function(html){
 		if(!instance){
 			instance = new CreateDiv(html);
 		}
 		return instance;
 	}
 })();

2.策略模式
定义一系列算法，把它们一个个封装起来，目的是将算法的使用
与算法的实现分离开来
一个策略模式的程序要有两部分组成
第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程。
第二个部分是环境类Context，context接受客户的请求，随后把请求委托给某个策略类。

//策略对象
var strategies = {
	"S": function (salary){
		return salary * 4;
	},
	"A": function (salary){
		return salary * 3;
	},
	"B": function (salary){
		return salary * 2;
	}
}
var calcBonus = function (level, salary){
	return strategies[level](salary);
}
calcBonus('S',20000);



3.代理模式
可以把一些消耗大的操作放在代理里执行，这叫虚拟代理
var miniConsole = (function(){
	var cache = [];
	var handler = function(ev){
		if(ev.keyCode === 113){
			//do sth
		}
	}
	return{
		log: function(){
			var arg = arguments;
			cache.push(function(){
				return miniConsole.log.apply(miniConsole,arg)
			})
		}
	}
})()
缓存代理：
var mult = function(){
	console.log("start calc");
	var a = 1;
	for(var i = 0,l = arguments.length;i < l;i++){
		a = a * argumens[i];
	}
	return a;
}

var proxyMult = (function(){
	var cache = {};
	return function (){
		var args = Array.prototype.join.call(arguments,',');
		if(args in cache){
			return ceche[args];
		}
		return cache[args] = mult.apply(this,argumens);
	}
})
可以在ajax异步请求数据的时候使用缓存代理，比如项目中用到分页的需求，
把拉取过的数据放在缓存中可以减少对后台的请求。

还可以利用高阶函数来动态创建代理

var creatProxyFactory = function(fn){
	var cache = {};
	return function(){
		var args = Array.prototype.join.call(arguments,',');
		if(args in cache){
			return cache[args];
		}
		return cache[args] = fn.apply(this,arguments);
	}
}
var proxyMult = createProxyFactory(mult);
var proxyPlus = createProxyFactory(plus);

代理的种类：
1.防火墙代理
2.远程代理
3.保护代理
4.智能引用代理
5.写时复制代理


4.迭代器模式
内部迭代器
each函数的内部定义好迭代规则，外部只需要一次初始调用
外部迭代器
外部迭代器增加了一些调用的复杂度，也增强了迭代器的灵活性

5.发布-订阅模式（观察者模式）
实现步骤：
一、制定一个发布者
二、给发布者添加一个缓存列表，用于存放回调函数以通知订阅者
三、最后发布消息的时候，发布者会遍历这个缓存列表，一次存放里面存放的订阅者回调函数

优点： 
时间上解耦，对象之间解耦，还可以实现中介者模式
缺点：
比较消耗内存，跟踪bug不容易

6.命令模式
要记住命令的发起者和接受者然后去执行：
var refreshMenuBarCommand = RefreshMenuBarCommand(MenuBar)
setCommand(button1, refreshMenuBarCommand);
还可以把命令推进堆栈中去操作回退
或者进行宏命令操作
